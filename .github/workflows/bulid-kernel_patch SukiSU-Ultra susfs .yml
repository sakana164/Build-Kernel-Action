name: Build Kernel_diff patch SukiSU-Ultra susfs

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: 'sakana164/kernel_xiaomi_sm8250'
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'qcom_rekernel'
      KERNEL_DEFCONFIG:
        description: 'Defconfig'
        required: true
        default: 'alioth_defconfig'
      CUSTOM_CLANG_URL:
        description: 'Custom Clang URL'
        required: true
        default: 'https://raw.githubusercontent.com/ZyCromerZ/Clang/main/Clang-main-link.txt'
      USE_AOSP_CLANG:
        description: 'Use AOSP Clang'
        required: true
        default: true
        type: boolean
      # PERSONAL_TOKEN:
      #   description: 'Personal access token'
      #   required: true
      #   default: ''
      ENABLE_KERNELSU:
        description: 'Use KernelSU'
        required: true
        default: true
        type: boolean
      ENABLE_SUSFS:
        description: 'Enable SUSFS'
        required: true
        default: true
        type: boolean
      KSU_BRANCH:
        description: 'SukiSU-Ultra BRANCH'
        required: true
        default: 'susfs-main'
      ADD_PATH_UMOUNT:
        description: 'Add `path_umount` for KernelSU'
        required: true
        default: true
        type: boolean
      ENABLE_KPM:
        description: 'KPM Support'
        required: true
        default: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Configuration
      run: |
        echo "KERNEL_SOURCE=${{ github.event.inputs.KERNEL_SOURCE }}" >> $GITHUB_ENV
        echo "KERNEL_SOURCE_BRANCH=${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}" >> $GITHUB_ENV
        echo "KERNEL_DEFCONFIG=${{ github.event.inputs.KERNEL_DEFCONFIG }}" >> $GITHUB_ENV
        echo "CUSTOM_CLANG_URL=${{ github.event.inputs.CUSTOM_CLANG_URL }}" >> $GITHUB_ENV
        echo "USE_AOSP_CLANG=${{ github.event.inputs.USE_AOSP_CLANG }}" >> $GITHUB_ENV
        # echo "PERSONAL_TOKEN=${{ github.event.inputs.PERSONAL_TOKEN }}" >> $GITHUB_ENV
        echo "ENABLE_KERNELSU=${{ github.event.inputs.ENABLE_KERNELSU }}" >> $GITHUB_ENV
        echo "ENABLE_KPM=${{ github.event.inputs.ENABLE_KPM }}" >> $GITHUB_ENV
        echo "ADD_PATH_UMOUNT=${{ github.event.inputs.ADD_PATH_UMOUNT }}" >> $GITHUB_ENV
        echo "ENABLE_SUSFS=${{ github.event.inputs.ENABLE_SUSFS }}" >> $GITHUB_ENV
        echo "KSU_BRANCH=${{ github.event.inputs.KSU_BRANCH }}" >> $GITHUB_ENV

    - name: Setup Build Environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_DEFCONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt update
        sudo apt install bc make bison build-essential curl flex g++-multilib gcc-multilib git gnupg gperf libfuse-dev lib32readline-dev lib32z1-dev liblz4-tool libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zlib1g-dev libc6-dev-i386 libncurses6 libncursesw6 lib32ncurses-dev lib32ncurses6 lib32ncursesw6 libncurses5-dev

    - name: Setup Ccache
      run: |
        CCACHE_VERSION=$(curl -s https://api.github.com/repos/ccache/ccache/releases/latest | grep '"tag_name":' | sed 's/.*"v\([^"]*\)".*/\1/')
        wget -q https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz
        tar -xf ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz
        sudo cp ccache-${CCACHE_VERSION}-linux-x86_64/ccache /usr/local/bin/
        sudo chmod +x /usr/local/bin/ccache
        ccache --version
        mkdir -p $GITHUB_WORKSPACE/ccache
        ccache -o compression=true
        ccache -o hard_link=true
        ccache -o hash_dir=false
        ccache -o compiler_check=content
        ccache -o direct_mode=true
        ccache -o depend_mode=true
        ccache -o sloppiness=file_macro,locale,time_macros,include_file_ctime,include_file_mtime
        ccache -M 4G
        echo "CCACHE_DIR=$GITHUB_WORKSPACE/ccache" >> $GITHUB_ENV

    - name: Restore Ccache
      uses: actions/cache@v4
      id: ccache-cache
      with:
        path: ccache
        key: ccache-${{ env.KERNEL_SOURCE }}-${{ env.KERNEL_SOURCE_BRANCH }}-${{ env.DEVICE }}
        restore-keys: |
          ccache-${{ env.KERNEL_SOURCE }}-${{ env.KERNEL_SOURCE_BRANCH }}-
          ccache-${{ env.KERNEL_SOURCE }}-
          ccache-

    - name: Cache Clang Toolchain
      if: env.USE_AOSP_CLANG == 'true'
      id: cache-clang
      uses: actions/cache@v4
      with:
        path: clang
        key: clang-r547379
        restore-keys: |
          clang-

    - name: Download AOSP Clang Toolchain
      if: env.USE_AOSP_CLANG == 'true' && steps.cache-clang.outputs.cache-hit != 'true'
      run: |
        wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz
  
    - name: Download Custom Clang Toolchain
      if: env.USE_AOSP_CLANG == 'false'
      run: |
        wget -q $(curl ${{ env.CUSTOM_CLANG_URL }}) -O clang.tar.gz
  
    - name: Extract Clang Toolchain
      if: (env.USE_AOSP_CLANG == 'true' && steps.cache-clang.outputs.cache-hit != 'true') || env.USE_AOSP_CLANG == 'false'
      run: |
        mkdir clang
        tar -C clang/ -zxf clang.tar.gz

    - name: Checkout Kernel
      uses: actions/checkout@v4
      with:
        # token: ${{env.PERSONAL_TOKEN}}
        repository: ${{ env.KERNEL_SOURCE }}
        ref: ${{ env.KERNEL_SOURCE_BRANCH }}
        submodules: recursive
        path: kernel-source

    - name: Check Defconfig
      run: |
        if [ -f "kernel-source/arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}" ]; then
          echo "[+] Defconfig detected to exist"
        else
          cd kernel-source
          export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
          chmod +x scripts/update_defconfig
          ./scripts/update_defconfig ${{ env.DEVICE }}
          echo "[+] Update Defconfig Successful"
        fi

    - name: Apply SUSFS Patch For Kernel
      if: env.ENABLE_SUSFS == 'true'
      run: |
        wget -q https://github.com/sakana164/kernel_xiaomi_sm8250/commit/f1f659b40d11ef10f5568a27731c219b9138937e.patch -O susfs-main-patch.patch
        wget -q https://github.com/sakana164/kernel_xiaomi_sm8250/commit/7a26de1b77c01ba5b7cf97a800ccc7f540999884.patch -O susfs-patch-1.patch
        cd kernel-source
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git am ../susfs-main-patch.patch
        git am ../susfs-patch-1.patch
        echo "[+] Susfs patch for kernel setup done."

    - name: Setup KernelSU
      if: env.ENABLE_KERNELSU == 'true'
      run: |
        cd kernel-source
        git config --global user.email "76257039+sakana164@users.noreply.github.com"
        git config --global user.name "sakana164"
        git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
        patch -p1 --no-backup-if-mismatch < SukiSU_patch/4.19/ksu_hooks_sukisu_4.19.patch
        echo "CONFIG_KSU=y" kernel-source/KernelSU>> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_MANUAL_HOOK=y" kernel-source/KernelSU>> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        if [ "${{ env.ENABLE_SUSFS }}" = "true" ]; then
          echo "KSU_BRANCH=susfs-dev" >> $GITHUB_ENV
        else
          echo "KSU_BRANCH=nongki" >> $GITHUB_ENV
        fi
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s ${{ env.KSU_BRANCH }}
        if [ ${{ env.ENABLE_KPM }} = true ]; then
          echo "CONFIG_KPM=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        fi
        if [ ${{ env.ADD_PATH_UMOUNT }} = true ]; then
          git am ../patch/KernelSU-path_umount.patch
        fi
        git submodule add -b ${{ env.KSU_BRANCH }} https://github.com/ShirkNeko/SukiSU-Ultra.git KernelSU
        git submodule add https://github.com/ShirkNeko/SukiSU_patch.git SukiSU_patch
        echo "[+] KernelSU setup done."
        
    - name: Add SUSFS Configuration
      if: env.ENABLE_SUSFS == 'true'
      run: |
        # Add SUSFS configuration settings

        cd kernel-source
        echo "CONFIG_KSU_SUSFS=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        
        echo "[+] Susfs Configuration Add."

    - name: Make working directory clean to avoid dirty
      run: |
        cd kernel-source
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add -A && git commit -am "Make working directory clean done" || echo "Commit failed,No changes to commit"

    - name: Build Kernel
      run: |
        cd kernel-source
        export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
        export KBUILD_BUILD_HOST=sakana
        export KBUILD_BUILD_USER=sakana164

        make -j$(nproc --all) O=out ARCH=arm64 CC="ccache clang" ${{ env.KERNEL_DEFCONFIG }}

        scripts/config --file out/.config \
          -e THINLTO \
          -e LTO_CLANG \
          -d CONFIG_CFI_CLANG \
          -d CFI_PERMISSIVE \
          -d CFI_CLANG \
          -e COMPAT_VDSO \
          -e SHADOW_CALL_STACK \
          -e SHADOW_CALL_STACK_VMAP \
          -e RELR

        make -j$(nproc --all) O=out ARCH=arm64 CC="ccache clang" LLVM=1 LLVM_IAS=1 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=arm-linux-gnueabi-

    - name: Show Ccache Stats
      run: |
        ccache -sv

    - name: Checkout AnyKernel3
      uses: actions/checkout@v4
      with:
        # token: ${{env.PERSONAL_TOKEN}}
        repository: sakana164/AnyKernel3
        path: kernel-source/AnyKernel3
       
    - name: KPM Patching Image Files (KPM 修补 Image 文件)
      run: |
        if [ ${{ env.ENABLE_KPM }} = true ]; then
          echo "正在修补 Image 文件..."
          cd kernel-source/out/arch/arm64/boot/
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
          chmod 777 patch
          ./patch
          if [ $? -eq 0 ]; then
            rm -f Image
            mv oImage Image
            echo "Image file repair complete (Image 文件修补完成)"
          else
            echo "KPM Patch Failed, Use Original Image (KPM 修补失败，使用原始 Image)"
          fi
        else 
          echo "KPM is not enabled or KernelSU variants do not support KPM. (KPM 未启用或 KernelSU 变体不支持 KPM)"
        fi

    - name: Patch Boot
      run: |
        mkdir IMG
        chmod +x ./magiskboot
        echo "Getting latest OrangeFox Recovery release..."
        LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/sakana164/android_device_xiaomi_alioth-OFRP/releases/latest | grep -oP '"browser_download_url": "\K[^"]+\.zip' | head -1)
        echo "Downloading: $LATEST_RELEASE_URL"
        wget "$LATEST_RELEASE_URL" -O ofox-recovery.zip
        if unzip -j ofox-recovery.zip "recovery.img" -d ./ 2>/dev/null; then
            echo "Successfully extracted recovery.img"
        else
            echo "Error: Could not find recovery.img in the ZIP file"
        fi
        if [ -f "recovery.img" ]; then
            echo "Unpacking recovery.img to extract ramdisk..."
            ./magiskboot unpack recovery.img
        else
            echo "Error: recovery.img not found after extraction"
            exit 1
        fi
        unzip boot.zip
        cp -f kernel-source/out/arch/arm64/boot/Image kernel
        ./magiskboot repack boot.img
        echo "Successfully repack boot.img"
        mv new-boot.img IMG/boot.img

    - name: Prepare artifacts
      run: |
        cd kernel-source
        KERNEL_NAME=$(grep "CONFIG_LOCALVERSION=" arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }} | cut -d'-' -f2 | tr -d '"')
        sed -i "s/アリエス/$KERNEL_NAME/g" ./AnyKernel3/anykernel.sh
        if [ -f "out/arch/arm64/boot/Image" ]; then
            cp out/arch/arm64/boot/Image AnyKernel3
        fi
        if [ -f "out/arch/arm64/boot/dtbo.img" ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3
        fi
        if [ -f "out/arch/arm64/boot/dtb" ]; then
            cp out/arch/arm64/boot/dtb AnyKernel3
        fi
        ./scripts/extract-ikconfig out/arch/arm64/boot/Image > ${{ env.KERNEL_DEFCONFIG }}-${{ env.BUILD_TIME }}
        if [ "${{ env.ENABLE_KERNELSU }}" = "true" ]; then
          echo "ENABLE_KERNELSU=-SukiSU Ultra" >> $GITHUB_ENV
        else
          echo "ENABLE_KERNELSU=" >> $GITHUB_ENV
        fi
        if [ "${{ env.ENABLE_SUSFS }}" = "true" ]; then
          echo "ENABLE_SUSFS=SUSFS" >> $GITHUB_ENV
        else
          echo "ENABLE_SUSFS=" >> $GITHUB_ENV
        fi
        if [ ${{ env.ENABLE_KPM }} = true ]; then
          echo "ENABLE_KPM=KPM" >> $GITHUB_ENV
        else
          echo "ENABLE_KPM=" >> $GITHUB_ENV
        fi

    - name: Upload Kernel AnyKernel3 Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_SOURCE_BRANCH }}-kernel-${{ env.DEVICE }}${{ env.ENABLE_KERNELSU }}-${{ env.ENABLE_SUSFS }}-${{ env.ENABLE_KPM }}-${{ env.BUILD_TIME }}
        path: |
          kernel-source/AnyKernel3/
          !kernel-source/AnyKernel3/*.git*
          !kernel-source/AnyKernel3/patch
          !kernel-source/AnyKernel3/modules
          !kernel-source/AnyKernel3/ramdisk
          !kernel-source/AnyKernel3/README.md
        compression-level: 9

    - name: Upload IMG Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_SOURCE_BRANCH }}-IMG-${{ env.DEVICE }}${{ env.ENABLE_KERNELSU }}-${{ env.ENABLE_SUSFS }}-${{ env.ENABLE_KPM }}-${{ env.BUILD_TIME }}
        path: |
          IMG/
        compression-level: 9

    - name: Upload Defconfig
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_SOURCE_BRANCH }}-${{ env.KERNEL_DEFCONFIG }}
        path: |
          kernel-source/${{ env.KERNEL_DEFCONFIG }}-${{ env.BUILD_TIME }}
          kernel-source/arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        compression-level: 9
