name: Build Kernel_diff patch lineage mksu

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: 'sakana164/kernel_xiaomi_sm8250'
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'qcom_rekernel'
      KERNEL_DEFCONFIG:
        description: 'Defconfig'
        required: true
        default: 'alioth_defconfig'
      AOSP_CLANG_BRANCH:
        description: 'AOSP Clang Branch'
        required: true
        default: 'main'
      AOSP_CLANG_VERSION:
        description: 'AOSP Clang Version'
        required: true
        default: 'r547379'
      USE_CUSTOM_CLANG:
        description: 'Use Custom Clang'
        required: true
        default: false
        type: boolean
      CUSTOM_CLANG_URL:
        description: 'Custom Clang URL'
        required: true
        default: 'https://raw.githubusercontent.com/ZyCromerZ/Clang/main/Clang-main-link.txt'
      # PERSONAL_TOKEN:
      #   description: 'Personal access token'
      #   required: true
      #   default: ''
      ENABLE_KERNELSU:
        description: 'Use KernelSU'
        required: true
        default: true
        type: boolean
      ADD_PATH_UMOUNT:
        description: 'Add `path_umount` for KernelSU'
        required: true
        default: true
        type: boolean
      KERNELSU_VERSION:
        description: 'Pick KERNELSU_VERSION'
        required: true
        default: rksu
        type: choice
        options:
          - mksu
          - rksu

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Configuration
      run: |
        echo "KERNEL_SOURCE=${{ github.event.inputs.KERNEL_SOURCE }}" >> $GITHUB_ENV
        echo "KERNEL_SOURCE_BRANCH=${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}" >> $GITHUB_ENV
        echo "KERNEL_DEFCONFIG=${{ github.event.inputs.KERNEL_DEFCONFIG }}" >> $GITHUB_ENV
        echo "AOSP_CLANG_BRANCH=${{ github.event.inputs.AOSP_CLANG_BRANCH }}" >> $GITHUB_ENV
        echo "AOSP_CLANG_VERSION=${{ github.event.inputs.AOSP_CLANG_VERSION }}" >> $GITHUB_ENV
        echo "USE_CUSTOM_CLANG=${{ github.event.inputs.USE_CUSTOM_CLANG }}" >> $GITHUB_ENV
        echo "CUSTOM_CLANG_URL=${{ github.event.inputs.CUSTOM_CLANG_URL }}" >> $GITHUB_ENV
        # echo "PERSONAL_TOKEN=${{ github.event.inputs.PERSONAL_TOKEN }}" >> $GITHUB_ENV
        echo "ENABLE_KERNELSU=${{ github.event.inputs.ENABLE_KERNELSU }}" >> $GITHUB_ENV
        echo "KERNELSU_VERSION=${{ github.event.inputs.KERNELSU_VERSION }}" >> $GITHUB_ENV
        echo "ADD_PATH_UMOUNT=${{ github.event.inputs.ADD_PATH_UMOUNT }}" >> $GITHUB_ENV

    - name: Setup Build Environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_DEFCONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt update
        sudo apt install bc make bison build-essential curl flex g++-multilib gcc-multilib git gnupg gperf libfuse-dev lib32readline-dev lib32z1-dev liblz4-tool libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zlib1g-dev libc6-dev-i386 libncurses6 libncursesw6 lib32ncurses-dev lib32ncurses6 lib32ncursesw6 libncurses5-dev

    - name: Setup Ccache
      run: |
        CCACHE_VERSION=$(curl -s https://api.github.com/repos/ccache/ccache/releases/latest | grep '"tag_name":' | sed 's/.*"v\([^"]*\)".*/\1/')
        wget -q https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz
        tar -xf ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz
        sudo cp ccache-${CCACHE_VERSION}-linux-x86_64/ccache /usr/local/bin/
        sudo chmod +x /usr/local/bin/ccache
        ccache --version
        mkdir -p $GITHUB_WORKSPACE/ccache
        ccache -o compression=true
        ccache -o hard_link=true
        ccache -o hash_dir=false
        ccache -o compiler_check=content
        ccache -o direct_mode=true
        ccache -o depend_mode=true
        ccache -o sloppiness=file_macro,locale,time_macros,include_file_ctime,include_file_mtime
        ccache -M 4G
        echo "CCACHE_DIR=$GITHUB_WORKSPACE/ccache" >> $GITHUB_ENV
        CACHE_BRANCH=""
        if [[ "${{ env.KERNEL_SOURCE_BRANCH }}" == *"qcom"* ]]; then
          CACHE_BRANCH="-qcom"
          echo "缓存策略: $CACHE_BRANCH"
        elif [[ "${{ env.KERNEL_SOURCE_BRANCH }}" == *"lineage"* ]]; then
          CACHE_BRANCH="-lineage"
          echo "缓存策略: $CACHE_BRANCH"
        fi
        echo "CACHE_BRANCH=$CACHE_BRANCH" >> $GITHUB_ENV

    - name: Restore Ccache
      uses: actions/cache@v4
      id: ccache-cache
      with:
        path: ccache
        key: ccache-${{ env.KERNEL_SOURCE }}-${{ env.DEVICE }}${{ env.CACHE_BRANCH }}
        restore-keys: |
          ccache-${{ env.KERNEL_SOURCE }}-${{ env.DEVICE }}-
          ccache-${{ env.KERNEL_SOURCE }}-
          ccache-

    - name: Cache Clang Toolchain
      if: env.USE_CUSTOM_CLANG != 'true'
      id: cache-clang
      uses: actions/cache@v4
      with:
        path: clang
        key: clang-${{ env.AOSP_CLANG_VERSION }}
        restore-keys: |
          clang-

    - name: Download AOSP Clang Toolchain
      if: env.USE_CUSTOM_CLANG == 'false' && steps.cache-clang.outputs.cache-hit != 'true'
      run: |
        wget -q https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/${{ env.AOSP_CLANG_BRANCH }}/clang-${{ env.AOSP_CLANG_VERSION }}.tar.gz -O clang.tar.gz
  
    - name: Download Custom Clang Toolchain
      if: env.USE_CUSTOM_CLANG == 'true'
      run: |
        wget -q $(curl ${{ env.CUSTOM_CLANG_URL }}) -O clang.tar.gz
  
    - name: Extract Clang Toolchain
      if: env.USE_CUSTOM_CLANG == 'true' || steps.cache-clang.outputs.cache-hit != 'true'
      run: |
        mkdir clang
        tar -C clang/ -zxf clang.tar.gz

    - name: Checkout Kernel
      uses: actions/checkout@v4
      with:
        # token: ${{env.PERSONAL_TOKEN}}
        repository: ${{ env.KERNEL_SOURCE }}
        ref: ${{ env.KERNEL_SOURCE_BRANCH }}
        submodules: recursive
        path: kernel-source
     
    - name: Check Defconfig
      run: |
        if [ -f "kernel-source/arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}" ]; then
          echo "[+] Defconfig detected to exist"
        else
          cd kernel-source
          export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
          chmod +x scripts/update_defconfig
          ./scripts/update_defconfig ${{ env.DEVICE }}
          echo "[+] Update Defconfig Successful"
        fi

    - name: Setup KernelSU
      if: env.ENABLE_KERNELSU == 'true'
      run: |
        cd kernel-source
        git config --global user.email "76257039+sakana164@users.noreply.github.com"
        git config --global user.name "sakana164"
        git am ../patch/KernelSU_mksu.patch
        if [ ${{ env.ADD_PATH_UMOUNT }} = true ]; then
          git am ../patch/KernelSU-path_umount.patch
          echo "[+] path_umount patch applied."
        fi
        echo "CONFIG_KSU=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        if [ ${{ env.KERNELSU_VERSION }} = "mksu" ]; then
          curl -LSs "https://raw.githubusercontent.com/sakana164/KernelSU/mksu/kernel/setup.sh" | bash -s mksu
          git submodule add -b mksu https://github.com/sakana164/KernelSU.git KernelSU
          echo "[+] MagicMount KernelSU setup done."
        else
          curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/main/kernel/setup.sh" | bash -s main
          git submodule add -b main https://github.com/rsuntk/KernelSU.git KernelSU
          echo "[+] Rsuntk KernelSU setup done."
        fi

    - name: Make working directory clean to avoid dirty
      run: |
        cd kernel-source
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add -A && git commit -am "Make working directory clean done" || echo "Commit failed,No changes to commit"

    - name: Build Kernel
      run: |
        cd kernel-source
        export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
        export KBUILD_BUILD_HOST=sakana
        export KBUILD_BUILD_USER=sakana164

        make -j$(nproc --all) O=out ARCH=arm64 CC="ccache clang" ${{ env.KERNEL_DEFCONFIG }}

        scripts/config --file out/.config \
          -e THINLTO \
          -e LTO_CLANG \
          -d CONFIG_CFI_CLANG \
          -d CFI_PERMISSIVE \
          -d CFI_CLANG \
          -e COMPAT_VDSO \
          -e SHADOW_CALL_STACK \
          -e SHADOW_CALL_STACK_VMAP \
          -e RELR

        make -j$(nproc --all) O=out ARCH=arm64 CC="ccache clang" LLVM=1 LLVM_IAS=1 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=arm-linux-gnueabi-

    - name: Show Ccache Stats
      run: |
        ccache -sv

    - name: Checkout AnyKernel3
      uses: actions/checkout@v4
      with:
        # token: ${{env.PERSONAL_TOKEN}}
        repository: sakana164/AnyKernel3
        path: kernel-source/AnyKernel3

    - name: Patch Boot
      run: |
        mkdir IMG
        chmod +x ./magiskboot
        echo "Getting latest OrangeFox Recovery release..."
        LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/sakana164/android_device_xiaomi_alioth-OFRP/releases/latest | grep -oP '"browser_download_url": "\K[^"]+\.zip' | head -1)
        echo "Downloading: $LATEST_RELEASE_URL"
        wget "$LATEST_RELEASE_URL" -O ofox-recovery.zip
        if unzip -j ofox-recovery.zip "recovery.img" -d ./ 2>/dev/null; then
            echo "Successfully extracted recovery.img"
        else
            echo "Error: Could not find recovery.img in the ZIP file"
        fi
        if [ -f "recovery.img" ]; then
            echo "Unpacking recovery.img to extract ramdisk..."
            ./magiskboot unpack recovery.img
        else
            echo "Error: recovery.img not found after extraction"
            exit 1
        fi
        unzip boot.zip
        cp -f kernel-source/out/arch/arm64/boot/Image kernel
        ./magiskboot repack boot.img
        echo "Successfully repack boot.img"
        mv new-boot.img IMG/boot.img

    - name: Prepare artifacts
      run: |
        cd kernel-source
        KERNEL_NAME=$(grep "CONFIG_LOCALVERSION=" arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }} | cut -d'-' -f2 | tr -d '"')
        sed -i "s/アリエス/$KERNEL_NAME/g" ./AnyKernel3/anykernel.sh
        sed -i "s/DEVICE_NAME/$DEVICE/g" ./AnyKernel3/anykernel.sh
        if [ -f "out/arch/arm64/boot/Image" ]; then
            cp out/arch/arm64/boot/Image AnyKernel3
        fi
        if [ -f "out/arch/arm64/boot/dtbo.img" ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3
        fi
        if [ -f "out/arch/arm64/boot/dtb" ]; then
            cp out/arch/arm64/boot/dtb AnyKernel3
        fi
        ./scripts/extract-ikconfig out/arch/arm64/boot/Image > ${{ env.KERNEL_DEFCONFIG }}-${{ env.BUILD_TIME }}
        if [ "${{ env.ENABLE_KERNELSU }}" = "true" ]; then
          if [ ${{ env.KERNELSU_VERSION }} = "mksu" ]; then
            echo "ENABLE_KERNELSU=-MagicMount KernelSU" >> $GITHUB_ENV
          else
            echo "ENABLE_KERNELSU=-Rsuntk KernelSU" >> $GITHUB_ENV
          fi
        else
          echo "ENABLE_KERNELSU=" >> $GITHUB_ENV
        fi

    - name: Upload Kernel AnyKernel3 Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_SOURCE_BRANCH }}-kernel-${{ env.DEVICE }}${{ env.ENABLE_KERNELSU }}-${{ env.BUILD_TIME }}
        path: |
          kernel-source/AnyKernel3/
          !kernel-source/AnyKernel3/*.git*
          !kernel-source/AnyKernel3/patch
          !kernel-source/AnyKernel3/modules
          !kernel-source/AnyKernel3/ramdisk
          !kernel-source/AnyKernel3/README.md
        compression-level: 9

    - name: Upload IMG Package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_SOURCE_BRANCH }}-IMG-${{ env.DEVICE }}${{ env.ENABLE_KERNELSU }}-${{ env.BUILD_TIME }}
        path: |
          IMG/
        compression-level: 9

    - name: Upload Defconfig
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_SOURCE_BRANCH }}-${{ env.KERNEL_DEFCONFIG }}
        path: |
          kernel-source/${{ env.KERNEL_DEFCONFIG }}-${{ env.BUILD_TIME }}
          kernel-source/arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
        compression-level: 9
